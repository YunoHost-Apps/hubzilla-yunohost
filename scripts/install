#!/bin/bash

source .fonctions       # Charge les fonctions génériques habituellement utilisées dans le script

CLEAN_SETUP () {
# Nettoyage des résidus d'installation non pris en charge par le script remove.
# Pas de nettoyage supplémentaire nécessaire ici...
        echo ""
}
TRAP_ON # Active trap pour arrêter le script si une erreur est détectée.

# Retrieve arguments
app=$YNH_APP_INSTANCE_NAME

domain=$YNH_APP_ARG_DOMAIN
path=$YNH_APP_ARG_PATH
admin=$YNH_APP_ARG_ADMIN
email=$YNH_APP_ARG_EMAIL
upload=$YNH_APP_ARG_UPLOAD

# Source app helpers
source /usr/share/yunohost/helpers

# Vérifie que les variables ne sont pas vides.
CHECK_VAR "$app" "app name not set"

CHECK_USER "$admin"     # Vérifie la validité de l'user admin

CHECK_PATH      # Vérifie et corrige la syntaxe du path.
CHECK_DOMAINPATH        # Vérifie la disponibilité du path et du domaine.

# Créer le repertoire de destination et stocke son emplacement.
CHECK_FINALPATH # Vérifie que le dossier de destination n'est pas déjà utilisé.
sudo mkdir "$final_path"
ynh_app_setting_set $app final_path $final_path

# Enregistre les infos dans la config YunoHost
ynh_app_setting_set $app domain $domain
ynh_app_setting_set $app path $path
ynh_app_setting_set $app admin $admin
ynh_app_setting_set $app admin $email
ynh_app_setting_set $app admin $upload

# Install dependencies
sudo apt-get update
sudo apt-get install -y -qq php5-cli php5-imagick php5-gd php5-mcrypt

# Create db
#GENERATE_DB $app        # Créer une base de données et un utilisateur dédié au nom de l'app.
#Password is stored like that in the GENERATE_DB function : ynh_app_setting_set $app mysqlpwd $db_pwd
db_user=$app
db_user=${db_user//-/_} # mariadb ne supporte pas les - dans les noms de base de données. Ils sont donc remplacé par des _
# Génère un mot de passe aléatoire.
#       db_pwd=$(head -n20 /dev/urandom | tr -c -d 'A-Za-z0-9' | head -c20)
db_pwd=$(ynh_string_random)
CHECK_VAR "$db_pwd" "db_pwd empty"
# Utilise '$app' comme nom d'utilisateur et de base de donnée
# Initialise la base de donnée et stocke le mot de passe mysql.
ynh_mysql_create_db "$db_user" "$db_user" $db_pwd
ynh_app_setting_set $app db_pwd $db_pwd
ynh_app_setting_set $app db_user $db_user

# Copy source files
# A revoir
# Recuperer les sources a la volée
#sudo rsync -va ../sources/ $final_path/

# We download the sources and check the md5sum
# 1 - hubzilla
hubzilla_file=`sudo cat ../sources/hubzilla/source_file`;
sudo wget -nv -i ../sources/hubzilla/source_url -O $hubzilla_file
#sudo md5sum -c ../sources/hubzilla/source_md5 --status || (echo "Corrupt source" >&2 && false)
sudo unzip ${hubzilla_file} -d $final_path
# 2 - Addons
addons_file=`sudo cat ../sources/addons/source_file`;
sudo wget -nv -i ../sources/addons/source_url -O $addons_file
#sudo md5sum -c ../sources/addons/source_md5 --status || (echo "Corrupt source" >&2 && false)
sudo unzip ${addons_file} -d $final_path/addon
# 3 - some extra folders
sudo mkdir -p "${final_path}/store/[data]/smarty3"
sudo chmod -R 777 $final_path/store

# Import database schema
sudo mysql -u$db_user -p$db_pwd $db_user < $final_path/install/schema_mysql.sql

# Copy the template install/htconfig.sample.php to .htconfig.php
sudo cp $final_path/install/htconfig.sample.php $final_path/.htconfig.php

# Use sed to add the database information to .htconfig.php
sudo sed -i "s/your.mysqlhost.com/localhost/g" $final_path/.htconfig.php
sudo sed -i "s/mysqlpassword/$db_pwd/g" $final_path/.htconfig.php
sudo sed -i "s/mysqlusername/$db_user/g" $final_path/.htconfig.php
sudo sed -i "s/mysqldatabasename/$db_user/g" $final_path/.htconfig.php
sudo sed -i "s/mysite.example/$domain/g" $final_path/.htconfig.php
sudo sed -i "s/if the auto install failed, put a unique random string here/$(ynh_string_random)$(ynh_string_random)$(ynh_string_random)/g" $final_path/.htconfig.php
sudo sed -i "s/ADMIN_EMAIL_REPLACE/$email/g" $final_path/.htconfig.php

# Set www-data to owner
sudo chown -R www-data: $final_path

# Modify Nginx configuration file and copy it to Nginx conf directory
sed -i "s@YNH_WWW_PATH@$path@g" ../conf/nginx.conf
sed -i "s@YNH_WWW_ALIAS@$final_path@g" ../conf/nginx.conf
nginxconf=/etc/nginx/conf.d/$domain.d/$app.conf
sudo cp ../conf/nginx.conf $nginxconf
sudo chown root: $nginxconf
sudo chmod 600 $nginxconf

# Modify php.ini to allow exec() function and increase the upload size limits
#sudo sed -i 's/,pcntl_exec//g' /etc/php5/fpm/php.ini
sed -i "s@UPLOADTOCHANGE@$upload@g" ../conf/php-fpm.conf
phpfpmconf=/etc/php5/fpm/pool.d/$app.conf
sudo cp ../conf/php-fpm.conf $phpfpmconf
sudo chown root: $phpfpmconf
sudo chmod 644 $phpfpmconf

# Set up poller
sed -i "s@YNH_WWW_PATH@$final_path@g" ../conf/poller-cron
sudo cp ../conf/poller-cron /etc/cron.d/$app

# Enable api for client and make app public
ynh_app_setting_set $app skipped_uris "/"

# Reload services
sudo service php5-fpm restart || true
sudo service nginx reload || true
